%% ================================================================================================================================
%????1
%????
%candidates: ncandidates x 5
%points:     ????????????????(x,y),nx2,n????????????????
%lineLabels: ????????????(xi,yi)??????????????????????????nx1,??????????0
%lines:      ??????????-B,A,xmid,ymid??????(xmid,ymid)????????????????????mx4??m??????m??????
%????
%labels??    ????????n x 1,??????i????????????????????j??????????????????j,??????0?????? n x 1
%C??   ????????????????????????????????????????????????????????(x,y,a,b,phi)
function [mylabels,labels, ellipses] = ellipseDetection(candidates, points, normals, distance_tolerance, normal_tolerance, Tmin, angleCoverage, E)
    labels = zeros(size(points, 1), 1);
    mylabels = zeros(size(points, 1), 1);%????
    ellipses = zeros(0, 5);
  
    %% ????????????????????????????????????????????????????????????SE(salient ellipses)????????~SE????goodness????pseudo order
    goodness = zeros(size(candidates, 1), 1);%??????????0????????????????????????????????????????goodness(i) = -1??????
    for i = 1 : size(candidates,1)
        %ellipse circumference is approximate pi * (1.5*sum(ellipseAxes)-sqrt(ellipseAxes(1)*ellipseAxes(2))
        ellipseCenter = candidates(i, 1 : 2);
        ellipseAxes   = candidates(i, 3:4);
        tbins = min( [ 180, floor( pi * (1.5*sum(ellipseAxes)-sqrt(ellipseAxes(1)*ellipseAxes(2)) ) * Tmin ) ] );%??????
        %ellipse_normals = computePointAngle(candidates(i,:),points);
        %inliers = find( labels == 0 & dRosin_square(candidates(i,:),points) <= 1 );  % +-1??????????????????
        %??????????????????????????????????????(????????????a>b),s_dx????????????points??????
        
        % first find points with the bbox of the ellipse
        s_dx = find( points(:,1) >= (ellipseCenter(1)-ellipseAxes(1)-1) & points(:,1) <= (ellipseCenter(1)+ellipseAxes(1)+1) & points(:,2) >= (ellipseCenter(2)-ellipseAxes(1)-1) & points(:,2) <= (ellipseCenter(2)+ellipseAxes(1)+1));
        % filter using rosin distance
        inliers = s_dx(dRosin_square(candidates(i,:),points(s_dx,:)) <= 1);
        % compute normals using ellipse parameters
        ellipse_normals = computePointAngle(candidates(i,:),points(inliers,:));
        % filter again using normal consistency
        p_dot_temp = dot(normals(inliers,:), ellipse_normals, 2); %??????ellipse_normals(inliers,:)??????????ellipse_normals
        p_cnt = sum(p_dot_temp>0);%????????????????????????????????C????????????????????????????????????
        if(p_cnt > size(inliers,1)*0.5)
            %????????,??????????????    
            %ellipse_polarity = -1;
            inliers = inliers(p_dot_temp>0 & p_dot_temp >= 0.923879532511287 );%cos(pi/8) = 0.923879532511287, ????????22.5??  
        else
            %????????,?????????????? 
            %ellipse_polarity = 1;
            inliers = inliers(p_dot_temp<0 & (-p_dot_temp) >= 0.923879532511287 );
        end
        % this co called takeInliers further select the inliers, only
        % points that can be somwhow linked will be left.
        inliers = inliers(takeInliers(points(inliers, :), ellipseCenter, tbins)); 
        % length of inliers relative to the ellipse geometric entity like
        % Perimeter 
        support_inliers_ratio = length(inliers)/floor( pi * (1.5*sum(ellipseAxes)-sqrt(ellipseAxes(1)*ellipseAxes(2)) ));
        completeness_ratio = calcuCompleteness(points(inliers,:),ellipseCenter,tbins)/360;
        % now we have the goodness score of the ith ellipse
        goodness(i) = sqrt(support_inliers_ratio*completeness_ratio); %goodness = sqrt(r_i * r_c)
        %{
        if( support_inliers_ratio >= Tmin && completeness_ratio >= 0.75 ) %300/360 = 0.833333333333333 and ratio great than Tmin
            goodness(i) = -1;
            if (size(ellipses, 1) > 0)
                s_flag = false;
                for j = 1 : size(ellipses, 1)
                    %????????????????????????????????????????????pi*0.1 = 0.314159265358979
                    if (sqrt((ellipses(j, 1) - candidates(i, 1)) .^ 2 + (ellipses(j, 2) - candidates(i, 2)) .^ 2) <= distance_tolerance ...
                            && sqrt((ellipses(j, 3) - candidates(i, 3)) .^ 2 + (ellipses(j, 4) - candidates(i, 4)) .^ 2 ) <= distance_tolerance ...
                            && abs( ellipses(j, 5) - candidates(i, 5) ) <= 0.314159265358979) %pi/10 = 18??
                        s_flag = true;
                        labels(inliers) = j;%??????????????????????????????????????????
                        break;%????????????????????????????
                    end
                end
                if (~s_flag)%????????????????????????????(circles)??
                    labels(inliers) = size(ellipses, 1) + 1;
                    ellipses = [ellipses; candidates(i, :)];
                    %drawEllipses(candidates(i, :)',E);
                end
            else
                labels(inliers) = size(ellipses, 1) + 1;
                ellipses = [ellipses; candidates(i, :)];%????
                %drawEllipses(candidates(i, :)',E);
            end
        else
            goodness(i) = sqrt(support_inliers_ratio*completeness_ratio); %goodness = sqrt(r_i * r_c)
        end
        %}
    end
    %drawEllipses(ellipses',E);ellipses
    [goodness_descending, goodness_index] = sort(goodness,1,'descend');%here we can use pseudo order to speed up 
    candidates = candidates(goodness_index(goodness_descending>0),:);

    %%
%    t1 = clock;
    angles = [300; 210; 150; 90];%????????????????????????
    angles(angles < angleCoverage) = [];%??????????angleCoverage??????
    if (isempty(angles) || angles(end) ~= angleCoverage)%????angels????????????angles??????~=angleCoverage??????angleCoverage????????
        angles = [angles; angleCoverage];
    end
%    disp('????????????????????????????????????angleLoop??????????????????????angleCoverage??????????????????????????????????????????????????????????????????????????????????????????????????????');
    for angleLoop = 1 : length(angles)
        idx = find(labels == 0);%labels??????????????????edge_nx1??????????labels????0??????labels??????0??????
        if (length(idx) < 2 * pi * (6 * distance_tolerance) * Tmin)%??idx????????????????
            break;
        end
        % this corresponds to the section D in the paper, maybe....
        [L2, L, C, validCandidates] = subEllipseDetection( candidates, points(idx, :), normals(idx, :), distance_tolerance, normal_tolerance, Tmin, angles(angleLoop), E, angleLoop);
        candidates = candidates(validCandidates, :);%????logical????validCandidates????????????????????????????????????????????angleloop????
      % size(candidates)
      % disp(angleLoop)
        if (size(C, 1) > 0)
            for i = 1 : size(C, 1)
                flag = false;
                for j = 1 : size(ellipses, 1)
                    %????????????????????????????????????????????pi*0.1 = 0.314159265358979
                    
                    %% check if duplicate
                    if (sqrt((C(i, 1) - ellipses(j, 1)) .^ 2 + (C(i, 2) - ellipses(j, 2)) .^ 2) <= distance_tolerance ...
                        && sqrt((C(i, 3) - ellipses(j, 3)) .^ 2 + (C(i, 4) - ellipses(j, 4)) .^ 2) <= distance_tolerance ...
                        && abs(C(i, 5) - ellipses(j, 5)) <= 0.314159265358979) %pi/10 = 18??
                        flag = true;
                        labels(idx(L == i)) = j;%????????????????????????????????????????????????????idx????????????label??????????????????????j????????idx??labels??????????????(n x 1)??labels????????points(n x 2)????????,??idx????????
                        %==================================================
                        mylabels(idx(L2 == i)) = j;
                        %==================================================
                        break;%????????????????????????????
                    end 
                end
                if (~flag)%????????????????????????????(circles)??
                    labels(idx(L == i)) = size(ellipses, 1) + 1;
                    %=================================================================
                    %%????????????????????????  my code 
                    mylabels(idx(L2 == i)) = size(ellipses, 1) + 1;%????
                    %=================================================================
                    ellipses = [ellipses; C(i, :)];
                end
            end
        end
    end
%    t2 = clock;
%    disp(['????????????????',num2str(etime(t2,t1))]);
end
